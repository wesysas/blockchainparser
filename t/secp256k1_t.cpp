
// secp256k1 tests

#include <test.h>
#include <util.h>
#include <common.h>
#include <string.h>

#define LIST                                                                                                                                                                                                      \
    X("020001f8519a3bb0db8bc903293bece58f9ee719084b64fa6e21434385b6df2a58", "040001f8519a3bb0db8bc903293bece58f9ee719084b64fa6e21434385b6df2a5808b1f7f06ef451433696d2b338bb408212d14857edf8cea896a29e62a9076c90") \
    X("0201274397ff61979a9b1448c315226f002d740e7814206145ce917ddbd715dcc8", "0401274397ff61979a9b1448c315226f002d740e7814206145ce917ddbd715dcc8e23c542560167c6073263a821b5b701971a0ff9f5ba8458066c9e288d0e1ecf2") \
    X("020183524c6c60c1c632a002ab249f01726d803a9cbc2b02d13a9034f7de0e4ecf", "040183524c6c60c1c632a002ab249f01726d803a9cbc2b02d13a9034f7de0e4ecfb19671083b001171afa16f0e3c865932494558ecf4e31c0e69cf05834f3e5b90") \
    X("020384cf9b1c0d8921b3cffaed82495c5bcd3e0a4ac1222f8b264265a4e8227eb5", "040384cf9b1c0d8921b3cffaed82495c5bcd3e0a4ac1222f8b264265a4e8227eb52b3ae96733d80921ca7dc7b246042e77612b48976f9fae95d387f11c230d236e") \
    X("020db29608c447e239c4ae067287e1aedc7fe49598427fa306dcc43ea7543307e5", "040db29608c447e239c4ae067287e1aedc7fe49598427fa306dcc43ea7543307e5588f6815c5cb8fbd6545f89c3967d36e575ef7e40b22745a57c0b8dce72eabac") \
    X("023099dd9d3a38742228a2ae9bf0743b02fc435af762c90ff377d40b579be20622", "043099dd9d3a38742228a2ae9bf0743b02fc435af762c90ff377d40b579be20622b860948433ed1bafe8d5404018b4df90fecb83eee8362decc57ad925d0335650") \
    X("0244a1d246048946ebfa0a8523fed64b036fcc86484cca013ae9a41e2c3c4fb1a6", "0444a1d246048946ebfa0a8523fed64b036fcc86484cca013ae9a41e2c3c4fb1a6b4e5acf42f3f572eb7ea3835c7d80a5043863919a64a2631b81efac4c7e4023c") \
    X("027984ed9782c21b062e3a85f92c8648b740899c5abb1d172fdf81ee812803cfaf", "047984ed9782c21b062e3a85f92c8648b740899c5abb1d172fdf81ee812803cfaf0c4ff7bb6aaa888b82ddfb1847dc8c146ee7925f023e31be949f7f2fd0ec09dc") \
    X("02b429bc324b76764a49ae8baf2feebc4a378f69bf353ede29509bd2f525fb67c1", "04b429bc324b76764a49ae8baf2feebc4a378f69bf353ede29509bd2f525fb67c12933edb8ea7c0462e0b967d74307cb5ed7abd852aa99108908295627ec00079c") \
    X("02da19c3f145a07619dd27dc584a45f3d1883f60a1885bde517a0ab6014aa29bdc", "04da19c3f145a07619dd27dc584a45f3d1883f60a1885bde517a0ab6014aa29bdc9d055f19633baa1b57269e87235e0034db40d57c2106c9e6aa960c11f3c3315a") \
    X("02fffc64c9ca844c001192ee8c2cf836a304a6a2f05ca5fc6ada8b005eade0d1ee", "04fffc64c9ca844c001192ee8c2cf836a304a6a2f05ca5fc6ada8b005eade0d1ee6d64df2ac8aa41dce06995549416069e28a874c034c8ad1fc2eef7a81f11da68") \
    X("030073c15a3624972b84f8e0d489914498f02afb27af6452b1ce0319ed20cb14e8", "040073c15a3624972b84f8e0d489914498f02afb27af6452b1ce0319ed20cb14e8001b9098ee6d3edd79e7b5278c486279914c4d74a1b4756d64128f95dfea0a97") \
    X("030eb48cd15d7ef312aa104b5892326cfe18202c2b60fa5e673e761c78c4378da0", "040eb48cd15d7ef312aa104b5892326cfe18202c2b60fa5e673e761c78c4378da005370fd015ed217b5865031b53ea7d29d951fbdce8a4968fe7b079ce5ee402bd") \
    X("031a62a4887ec246d0745b774ce3436ca6ef27fa252d75e183a22206da733a1e31", "041a62a4887ec246d0745b774ce3436ca6ef27fa252d75e183a22206da733a1e31accd4f1b0bc7ba656351dbd10882605e070ebfb32592886fa76ef0bd39bbf291") \
    X("03579d0698358241f6bb369e813aaf093ccc2925ffc662406ef1bc31746b696e2b", "04579d0698358241f6bb369e813aaf093ccc2925ffc662406ef1bc31746b696e2b9600b37dabe2ed419925d611bbb221cdeb914ac46a07c58609df498e0ba6029f") \
    X("03764d10adfd8a2695155e75a9a3cad558dec03026e8a1477958930acc89256570", "04764d10adfd8a2695155e75a9a3cad558dec03026e8a1477958930acc89256570aefc0fd2a021b16445e7dd69bfcc0f451b9559e28c8aa9e7ff6398e0bb1f860b") \
    X("039c1d24bc3eaeb0fb1d0715d99ea7ac163cf61b12a2eef989bf8ff0362bc5bb7e", "049c1d24bc3eaeb0fb1d0715d99ea7ac163cf61b12a2eef989bf8ff0362bc5bb7e1007f8e665bc5199aa62675803895a0c35cd92d369e7c6a58e986b59249ab021") \
    X("03c6da5919d0ba00d20e195e07d4e51ce1c88ae0c753695d656c1968454bee947f", "04c6da5919d0ba00d20e195e07d4e51ce1c88ae0c753695d656c1968454bee947f201a2bcb9355e98e8e245c8cfe166348fa92ef8a15775267c45975bd39847c1d") \
    X("03d05586d15a72733acb40b442128aa4c8f245de8d58bb4b6f5144afa6db74fd9b", "04d05586d15a72733acb40b442128aa4c8f245de8d58bb4b6f5144afa6db74fd9b2965f7aacc779f2e119c284a0f164630721967f3c6348b2723673388c0332f43") \
    X("03d3bcea0b81e8ff0a76efb043d13aada6d1f0a095e1138c6ec3e97accba36a65c", "04d3bcea0b81e8ff0a76efb043d13aada6d1f0a095e1138c6ec3e97accba36a65ca7350eb8e6355868047fe7883b8272d592561fb5915d27f810ec605149ccfb75") \
    X("03d9895671a628c59871aab980d0295871da118139c4fe9cde70e5a7344f539cb1", "04d9895671a628c59871aab980d0295871da118139c4fe9cde70e5a7344f539cb167942f6ee18f323de626b260e7c391896ec9995e10a7ea8e7757b70a8fe65f41") \
    X("03dd566dd831e4e505daacad32d88f7107948f9c6360eaf2fbcf9fb843cc54ece5", "04dd566dd831e4e505daacad32d88f7107948f9c6360eaf2fbcf9fb843cc54ece589c3dcce2055110ab685f2e29b1e54f91950bd745901622d9134f18729cb07db") \
    X("03dd7b9de6df7e78f6fdb91f3bda52bef5ce52d978244898a22783eef4972d4a23", "04dd7b9de6df7e78f6fdb91f3bda52bef5ce52d978244898a22783eef4972d4a23cd9092f5b512e098718ca8c39648b2c6496f3d4a18fd7af745f6d2f5637cdc53") \
    X("03e17e72e1636cc3676b79e5609a1e3246f25eec7bce9c222f6bc00769b46fd0ae", "04e17e72e1636cc3676b79e5609a1e3246f25eec7bce9c222f6bc00769b46fd0ae1da1d0610124099c5cc11ab08a13952ae32c4d5b0e1e04c7fe9cb9f2cb372913") \
    X("03fff9ecbd747f5b8a8ae6d0f74f16be43a5c4b8dd38626c166903d7759a69295d", "04fff9ecbd747f5b8a8ae6d0f74f16be43a5c4b8dd38626c166903d7759a69295daafce63c1988358e3ee07af9d65860bf6c18747a2879ba393319ddfa07c65fd1") \

static bool check(
    const char *compressedHex,
    const char *decompressedHex
) {
    // FromHex
    auto ok = true;
    uint8_t compressedOrig[33];
    uint8_t decompressedOrig[65];
    fromHex(compressedOrig, (const uint8_t*)compressedHex, 33, false, true);
    fromHex(decompressedOrig, (const uint8_t*)decompressedHex, 65, false, true);

    // Decompress
    uint8_t decompressed[65];
    auto r0 = decompressPublicKey(decompressed, compressedOrig);
    TEST_CHECK(ok, r0, "failed to decompress");

    // Check that decompression worked
    auto r1 = (0==memcmp(decompressed, decompressedOrig, 65));
    TEST_CHECK(ok, r1, "recompressed key is not equal to compressed key");

    // Compress
    uint8_t compressed[65];
    auto r2 = compressPublicKey(compressed, decompressed);
    TEST_CHECK(ok, r2, "failed to compress key");

    // Check that compression worked
    auto r3 = (0==memcmp(compressed, compressedOrig, 33));
    TEST_CHECK(ok, r3, "recompressed key is not equal to compressed key");
    return ok;
}

static int test() {
    auto ok = true;
    #define X(x,y) ok = ok && check(x,y);
        LIST
    #undef X
    return ok ? 0 : 1;
}

static SimpleTest t0(test,  "compressed <-> uncompressed");

